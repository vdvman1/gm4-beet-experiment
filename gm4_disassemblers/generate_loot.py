from beet import Context, LootTable
from beet.contrib.vanilla import Vanilla
import itertools
from typing import Any

diamond_items = [
    "minecraft:diamond_sword",
    "minecraft:diamond_pickaxe",
    "minecraft:diamond_axe",
    "minecraft:diamond_shovel",
    "minecraft:diamond_hoe",
    "minecraft:diamond_helmet",
    "minecraft:diamond_chestplate",
    "minecraft:diamond_leggings",
    "minecraft:diamond_boots",
]
diamond_durability = [1562, 1562, 1562, 1562, 1562, 364, 529, 496, 430]
iron_items = [
    "minecraft:iron_sword",
    "minecraft:iron_pickaxe",
    "minecraft:iron_axe",
    "minecraft:iron_shovel",
    "minecraft:iron_hoe",
    "minecraft:iron_helmet",
    "minecraft:iron_chestplate",
    "minecraft:iron_leggings",
    "minecraft:iron_boots",
]
iron_durability = [251, 251, 251, 251, 251, 166, 241, 226, 196]
gold_items = [
    "minecraft:golden_sword",
    "minecraft:golden_pickaxe",
    "minecraft:golden_axe",
    "minecraft:golden_shovel",
    "minecraft:golden_hoe",
    "minecraft:golden_helmet",
    "minecraft:golden_chestplate",
    "minecraft:golden_leggings",
    "minecraft:golden_boots",
]
gold_durability = [33, 33, 33, 33, 33, 78, 113, 106, 92]
leather_items = [
    "minecraft:leather_helmet",
    "minecraft:leather_chestplate",
    "minecraft:leather_leggings",
    "minecraft:leather_boots",
]
leather_durability = [56, 81, 76, 66]
other_items = [
    "minecraft:turtle_helmet",
    "minecraft:bow",
    "minecraft:crossbow",
    "minecraft:shears",
    "minecraft:fishing_rod",
    "minecraft:flint_and_steel",
]
other_durability = [276, 385, 466, 239, 65, 65]
normal_items = diamond_items + iron_items + gold_items + leather_items + other_items
normal_durability = (
    diamond_durability
    + iron_durability
    + gold_durability
    + leather_durability
    + other_durability
)
special_items = ["minecraft:shield"]
special_durability = [337]


def beet_default(ctx: Context):
    print("Generating disassembly loot tables...")
    recipes = ctx.inject(Vanilla).mount("data/minecraft/recipes").data.recipes

    for i, item in enumerate(normal_items):
        curr_recipe = recipes[item].data
        if curr_recipe["type"] == "minecraft:crafting_shaped":
            pattern = ""
            for row in curr_recipe["pattern"]:
                if len(row) < 2:
                    row = " " + row
                if len(row) < 3:
                    row = row + " "
                pattern = pattern + row

            while len(pattern) < 9:
                pattern = pattern + " "

            pattern = ["".join(g) for _, g in itertools.groupby(pattern)]
            pattern = [item for sublist in pattern for item in sublist]
            curr_recipe["key"][" "] = {"item": "minecraft:air"}
            pattern = [(curr_recipe["key"][p[0]]["item"], len(p)) for p in pattern]
        else:
            pattern = list[tuple[Any, int]]()
            for ingredient in curr_recipe["ingredients"]:
                pattern.append((ingredient["item"], 1))

            if len(pattern) < 9:
                pattern.append(("minecraft:air", 9 - len(pattern)))

        pools: list[dict[str, Any]] = []
        for p in pattern:
            base: dict[str, Any] = {
                "rolls": p[1],
                "entries": [{"type": "minecraft:item", "name": p[0]}],
            }
            if p[0] == "minecraft:air":
                pools.append(base)
                continue

            base["entries"][0]["conditions"] = [
                {
                    "condition": "value_check",
                    "value": {
                        "type": "score",
                        "target": {"type": "fixed", "name": "$damage"},
                        "score": "gm4_disassembler",
                    },
                    "range": {
                        "min": 0,
                        "max": {
                            "type": "uniform",
                            "min": 0,
                            "max": normal_durability[i],
                        },
                    },
                }
            ]
            pools.append(
                {
                    "rolls": p[1],
                    "entries": [
                        {
                            "type": "minecraft:alternatives",
                            "children": [
                                base["entries"][0],
                                {"type": "minecraft:item", "name": "minecraft:air"},
                            ],
                        }
                    ],
                }
            )

        unnamespaced_id = item.split(":")[1]
        ctx.generate(
            f"gm4_disassemblers:disassembleables/{unnamespaced_id}",
            LootTable(
                {
                    "__comment": "Generated by generate_disassembly.py",
                    "type": "minecraft:generic",
                    "pools": pools,
                }
            ),
        )

    children: list[Any] = []
    for item in normal_items:
        children.append(
            {
                "type": "minecraft:loot_table",
                "name": f'gm4_disassemblers:disassembleables/{item.split(":")[1]}',
                "conditions": [
                    {"condition": "match_tool", "predicate": {"items": [item]}}
                ],
            }
        )
        if item in diamond_items:
            children[-1]["conditions"].append(
                {
                    "condition": "value_check",
                    "range": 1,
                    "value": {
                        "type": "score",
                        "target": {"type": "fixed", "name": "disassemble_diamonds"},
                        "score": "gm4_disassembler",
                    },
                }
            )

    ctx.generate(
        "gm4_disassemblers:caller",
        LootTable(
            {
                "__comment": "Generated by generate_disassembly.py",
                "type": "minecraft:fishing",
                "pools": [
                    {
                        "rolls": 1,
                        "entries": [
                            {"type": "minecraft:alternatives", "children": children}
                        ],
                    }
                ],
            }
        ),
    )
    print("Done!")
